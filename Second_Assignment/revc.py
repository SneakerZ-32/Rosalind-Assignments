s ="TGCTACTCGTTCGTGTACCGTACCACTCTCAAGGCGCGTGCTATCTGATGAGGAGTGAATTATGCCCCAGCTTTGTAGTTCACTACGCCTGTACATGTGTTCGCGACAATCCGCTTAGCTATATGAATAAGCATAGATTTATGTGCCAGAGCGTAATCTAGTGCACGTACACCCTCCTACCGACCTTTCTTAACCAGTACGAGAAATGGTGTCACATCTCCCTGGTAAGACTTGGGAGAGTCTAGCGCGGCTCTGTCAGGCCGTGTCTACTGCTGTTTGAAGAGTCCCTACAAGGCAACACATCGCCCTGAAGGCCATAACTAATACTGATCTTCATGTGATGATTCCAATAATTCTATAGCCGCGCCGTCTTTTAACCCTCGAGCACCTAGTTCCCGATGGCTCTTTACGAGCAATAAATCCTGGCGAAGCCCGTTACATCAGAAAAGACTTGGGGTTTTACGGCACCAAGTTTTGCTTGCTTCCTCCGCGTCTCGCAATAGCAGACGTGGCGGCTGAGTTAACAGATGTTAAATTAGAACGTTGAAACGTCCATTGTAACTTGAGGAAGGGTCTAAAGGCAACTAAAGTCGGTGCAGTCACTCAGGACGATGTTCAATAGCAGTTTTTCGTGCTAAATGCAGGATAGACGTAGTATCTGGGAGGATGGTATCGAAAGTGTATATTTTGCTATTACGAGATTACCTTTTCAAGATGTCTGGTCTATGAAAAGCCGTAGTACTTTAAGCGAGCGAACGTATCGATCTGGGGCCGTTCGGGGTTATATTTCACTGCCAACTTCTCGGGGCGGTCAATACGCTTAGGTTTTTAATGTTCCAAGGGCTGTATGAATCACTCTAGCTGATTGTACGTGGATGCCCCCGTGAGTCTGCCACATTGGAAGACGCCCGCAGGCATCAAGTGATTTACAAGTATGTCCCGA" [::-1] 
'''[::-1] is a list comprehension method that allows us to read the string in the opposite order
 enabling us to ue less computation power than to manually create a new reversed string
trough a for-loop'''
sc = ""  # Initialize an empty string to store the complementary sequence

# Iterate over each character in the string 's'
for char in s:
    if char == "A":
        sc = sc + "T"  # If the character is 'A', append 'T' to the complementary sequence
    if char == "T":
        sc = sc + "A"  # If the character is 'T', append 'A' to the complementary sequence
    if char == "G":
        sc = sc + "C"  # If the character is 'G', append 'C' to the complementary sequence
    if char == "C":
        sc = sc + "G"  # If the character is 'C', append 'G' to the complementary sequence

print(sc)  # Print the resulting complementary sequence

